// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Secretary.API.Data;

namespace Secretary.API.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20181127114813_AfterCongregacaoEstado")]
    partial class AfterCongregacaoEstado
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("secretary")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn)
                .HasAnnotation("ProductVersion", "2.1.4-rtm-31024")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("Secretary.API.Models.AssistenciaReuniao", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("AnoReferencia");

                    b.Property<long>("AuditoriaUsuario");

                    b.Property<long>("CongregacaoId");

                    b.Property<DateTime>("DataReferencia")
                        .HasColumnType("TIMESTAMP(3)");

                    b.Property<DateTime>("DateCreated");

                    b.Property<int?>("Estrangeiros1");

                    b.Property<int?>("Estrangeiros2");

                    b.Property<int?>("Estrangeiros3");

                    b.Property<int?>("Estrangeiros4");

                    b.Property<int?>("Estrangeiros5");

                    b.Property<string>("IPAddress");

                    b.Property<double?>("Media");

                    b.Property<int?>("MesReferencia");

                    b.Property<DateTime>("ModifiedDate");

                    b.Property<long>("ReuniaoId");

                    b.Property<int?>("Semana1");

                    b.Property<int?>("Semana2");

                    b.Property<int?>("Semana3");

                    b.Property<int?>("Semana4");

                    b.Property<int?>("Semana5");

                    b.Property<int?>("Total");

                    b.HasKey("Id");

                    b.HasIndex("CongregacaoId")
                        .HasName("FK_AssistenciaReuniao_Congregacao");

                    b.HasIndex("ReuniaoId")
                        .HasName("FK_AssistenciaReuniao_Reuniao");

                    b.ToTable("AssistenciaReuniao","secretary");
                });

            modelBuilder.Entity("Secretary.API.Models.Congregacao", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<long>("AuditoriaUsuario");

                    b.Property<string>("Bairro")
                        .HasMaxLength(255);

                    b.Property<string>("Cep")
                        .HasMaxLength(255);

                    b.Property<string>("Cidade")
                        .HasMaxLength(255);

                    b.Property<string>("Complemento")
                        .HasMaxLength(255);

                    b.Property<string>("Coordenador")
                        .HasMaxLength(255);

                    b.Property<DateTime>("DateCreated");

                    b.Property<string>("Email")
                        .HasMaxLength(255);

                    b.Property<long?>("EstadoId");

                    b.Property<string>("IPAddress");

                    b.Property<DateTime>("ModifiedDate");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<string>("NomeLogradouro")
                        .HasMaxLength(255);

                    b.Property<string>("Numero")
                        .HasMaxLength(255);

                    b.Property<bool>("Padrao")
                        .HasColumnType("boolean");

                    b.Property<string>("TelCelular")
                        .HasMaxLength(255);

                    b.Property<string>("TelResidencial")
                        .HasMaxLength(255);

                    b.Property<string>("TelTrabalho")
                        .HasMaxLength(255);

                    b.Property<string>("Telefone")
                        .HasMaxLength(255);

                    b.Property<long?>("TipoLogradouroId");

                    b.HasKey("Id");

                    b.HasIndex("EstadoId")
                        .HasName("FK_Congregacao_Estado");

                    b.HasIndex("TipoLogradouroId")
                        .HasName("FK_Congregacao_TipoLogradouro");

                    b.ToTable("Congregacao","secretary");
                });

            modelBuilder.Entity("Secretary.API.Models.Country", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("DateCreated");

                    b.Property<string>("IPAddress");

                    b.Property<string>("Iso");

                    b.Property<string>("Iso3");

                    b.Property<DateTime>("ModifiedDate");

                    b.Property<string>("Name");

                    b.Property<string>("NiceName");

                    b.Property<int?>("NumCode");

                    b.Property<int>("PhoneCode");

                    b.HasKey("Id");

                    b.ToTable("Country");
                });

            modelBuilder.Entity("Secretary.API.Models.Dianteira", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<long>("AuditoriaUsuario");

                    b.Property<long>("CongregacaoId");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("TIMESTAMP(3)");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<string>("IPAddress");

                    b.Property<DateTime>("ModifiedDate");

                    b.HasKey("Id");

                    b.HasIndex("CongregacaoId")
                        .HasName("FK_Dianteira_Congregacao");

                    b.ToTable("Dianteira","secretary");
                });

            modelBuilder.Entity("Secretary.API.Models.Estado", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<long>("AuditoriaUsuario")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("1");

                    b.Property<long?>("CountryId");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("TIMESTAMP(3)");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<string>("IPAddress");

                    b.Property<DateTime>("ModifiedDate");

                    b.HasKey("Id");

                    b.HasIndex("CountryId")
                        .HasName("FK_Estado_Country");

                    b.ToTable("Estado","secretary");
                });

            modelBuilder.Entity("Secretary.API.Models.Familia", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<long>("AuditoriaUsuario");

                    b.Property<long>("ChefeFamiliaId");

                    b.Property<long>("CongregacaoId");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("TIMESTAMP(3)");

                    b.Property<string>("IPAddress");

                    b.Property<long>("MembroId");

                    b.Property<DateTime>("ModifiedDate");

                    b.Property<string>("Parentesco")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.HasKey("Id");

                    b.HasIndex("ChefeFamiliaId")
                        .HasName("FK_Familia_ChefeFamilia");

                    b.HasIndex("CongregacaoId")
                        .HasName("FK_Familia_Congregacao");

                    b.HasIndex("MembroId")
                        .HasName("FK_Membro");

                    b.ToTable("Familia","secretary");
                });

            modelBuilder.Entity("Secretary.API.Models.Familiares", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<long>("AuditoriaUsuario");

                    b.Property<long>("CongregacaoId");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("TIMESTAMP(3)");

                    b.Property<string>("IPAddress");

                    b.Property<long>("MembroId");

                    b.Property<DateTime>("ModifiedDate");

                    b.Property<string>("Observacao")
                        .HasMaxLength(255);

                    b.Property<string>("Parentesco")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<long>("PublicadorId");

                    b.HasKey("Id");

                    b.HasIndex("CongregacaoId")
                        .HasName("FK_Familiares_Congregacao");

                    b.HasIndex("MembroId")
                        .HasName("FK_Familiares_Membro");

                    b.HasIndex("PublicadorId")
                        .HasName("FK_Familiares_Publicador");

                    b.ToTable("Familiares","secretary");
                });

            modelBuilder.Entity("Secretary.API.Models.Grupo", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<long?>("AjudanteId");

                    b.Property<long>("AuditoriaUsuario");

                    b.Property<long>("CongregacaoId");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("TIMESTAMP(3)");

                    b.Property<string>("IPAddress");

                    b.Property<string>("Local")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<DateTime>("ModifiedDate");

                    b.Property<long?>("SuperintendenteId");

                    b.HasKey("Id");

                    b.HasIndex("AjudanteId")
                        .HasName("FK_Grupo_Ajudante");

                    b.HasIndex("CongregacaoId")
                        .HasName("FK_Grupo_Congregacao");

                    b.HasIndex("SuperintendenteId")
                        .HasName("FK_Grupo_Superintendente");

                    b.ToTable("Grupo","secretary");
                });

            modelBuilder.Entity("Secretary.API.Models.PeticaoPioneiroAuxiliar", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<long>("CongregacaoId");

                    b.Property<DateTime>("DateCreated");

                    b.Property<bool?>("EstaAprovado")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValueSql("FALSE");

                    b.Property<string>("IPAddress");

                    b.Property<DateTime>("ModifiedDate");

                    b.Property<string>("Observacao")
                        .HasMaxLength(255);

                    b.Property<long>("PioneiroId");

                    b.Property<long>("PublicadorId");

                    b.Property<DateTime>("ReferenciaFinal");

                    b.Property<DateTime>("ReferenciaInicial");

                    b.HasKey("Id");

                    b.HasIndex("CongregacaoId")
                        .HasName("FK_PeticaoPioneiroAuxiliar_Congregacao");

                    b.HasIndex("PioneiroId")
                        .HasName("FK_PeticaoPioneiroAuxiliar_Pioneiro");

                    b.HasIndex("PublicadorId")
                        .HasName("FK_PeticaoPioneiroAuxiliar_Publicador");

                    b.ToTable("PeticaoPioneiroAuxiliar","secretary");
                });

            modelBuilder.Entity("Secretary.API.Models.Pioneiro", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<long>("AuditoriaUsuario")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("1");

                    b.Property<long>("CongregacaoId");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("TIMESTAMP(3)");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("IPAddress");

                    b.Property<DateTime>("ModifiedDate");

                    b.Property<string>("Observacao")
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.HasIndex("CongregacaoId")
                        .HasName("FK_Pioneiro_Congregacao");

                    b.ToTable("Pioneiro","secretary");
                });

            modelBuilder.Entity("Secretary.API.Models.PrivilegioCongregacional", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<long>("AuditoriaUsuario")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("1");

                    b.Property<long>("CongregacaoId");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("TIMESTAMP(3)");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<string>("IPAddress");

                    b.Property<DateTime>("ModifiedDate");

                    b.Property<string>("Observacao")
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.HasIndex("CongregacaoId")
                        .HasName("FK_PrivilegioCongregacional_Congregacao");

                    b.ToTable("PrivilegioCongregacional","secretary");
                });

            modelBuilder.Entity("Secretary.API.Models.Publicador", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<long>("AuditoriaUsuario");

                    b.Property<string>("Bairro")
                        .HasMaxLength(255);

                    b.Property<DateTime?>("Batismo")
                        .HasColumnType("TIMESTAMP(3)");

                    b.Property<string>("Cep")
                        .HasMaxLength(255);

                    b.Property<bool?>("ChefeFamilia")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValueSql("FALSE");

                    b.Property<string>("Cidade")
                        .HasMaxLength(255);

                    b.Property<string>("Complemento")
                        .HasMaxLength(255);

                    b.Property<long>("CongregacaoId");

                    b.Property<int>("CountryId");

                    b.Property<DateTime?>("DataAnciao")
                        .HasColumnType("TIMESTAMP(3)");

                    b.Property<DateTime?>("DataInativo")
                        .HasColumnType("TIMESTAMP(3)");

                    b.Property<DateTime?>("DataInicioServico")
                        .HasColumnType("TIMESTAMP(3)");

                    b.Property<DateTime?>("DataNascimento")
                        .HasColumnType("TIMESTAMP(3)");

                    b.Property<DateTime?>("DataReativado")
                        .HasColumnType("TIMESTAMP(3)");

                    b.Property<DateTime?>("DataServoMinisterial")
                        .HasColumnType("TIMESTAMP(3)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("TIMESTAMP(3)");

                    b.Property<long?>("DianteiraId");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<long?>("EstadoId");

                    b.Property<long?>("GrupoId");

                    b.Property<string>("IPAddress");

                    b.Property<DateTime?>("InicioPioneiro")
                        .HasColumnType("TIMESTAMP(3)");

                    b.Property<bool?>("IrmaoBatizado")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValueSql("FALSE");

                    b.Property<string>("Login")
                        .HasMaxLength(255);

                    b.Property<DateTime>("ModifiedDate");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<string>("NomeLogradouro")
                        .HasMaxLength(255);

                    b.Property<string>("NumeroPioneiro")
                        .HasMaxLength(255);

                    b.Property<string>("Observacao");

                    b.Property<string>("Perfil")
                        .HasMaxLength(255);

                    b.Property<long?>("PioneiroId");

                    b.Property<string>("Senha")
                        .HasMaxLength(255);

                    b.Property<string>("Sexo")
                        .HasMaxLength(255);

                    b.Property<long>("SituacaoId");

                    b.Property<string>("SituacaoServicoCampo")
                        .IsRequired()
                        .HasMaxLength(9);

                    b.Property<string>("TelCelular")
                        .HasMaxLength(255);

                    b.Property<string>("TelResidencial")
                        .HasMaxLength(255);

                    b.Property<string>("TelTrabalho")
                        .HasMaxLength(255);

                    b.Property<long?>("TipoLogradouroId");

                    b.HasKey("Id");

                    b.HasIndex("CongregacaoId")
                        .HasName("FK_Publicador_Congregacao");

                    b.HasIndex("DianteiraId")
                        .HasName("FK_Publicador_Dianteira");

                    b.HasIndex("EstadoId")
                        .HasName("FK_Publicador_Estado");

                    b.HasIndex("GrupoId")
                        .HasName("FK__PublicadorGrupo");

                    b.HasIndex("PioneiroId")
                        .HasName("FK_Publicador_Pioneiro");

                    b.HasIndex("SituacaoId")
                        .HasName("FK_Publicador_Situacao");

                    b.HasIndex("TipoLogradouroId")
                        .HasName("FK_Publicador_TipoLogradouro");

                    b.ToTable("Publicador","secretary");
                });

            modelBuilder.Entity("Secretary.API.Models.PublicadorHistorico", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<long>("CongregacaoId");

                    b.Property<DateTime>("DataReferencia")
                        .HasColumnType("TIMESTAMP(3)");

                    b.Property<DateTime>("DateCreated");

                    b.Property<string>("Evento")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<string>("IPAddress");

                    b.Property<DateTime>("ModifiedDate");

                    b.Property<string>("Observacao");

                    b.Property<long>("PublicadorId");

                    b.HasKey("Id");

                    b.HasIndex("CongregacaoId");

                    b.HasIndex("PublicadorId")
                        .HasName("FK_PublicadorHistorico_Publicador");

                    b.ToTable("PublicadorHistorico","secretary");
                });

            modelBuilder.Entity("Secretary.API.Models.PublicadorPrivilegios", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<long>("CongregacaoId");

                    b.Property<DateTime>("DateCreated");

                    b.Property<string>("IPAddress");

                    b.Property<DateTime>("ModifiedDate");

                    b.Property<long>("PrivilegioCongregacionalId");

                    b.Property<long>("PublicadorId");

                    b.HasKey("Id");

                    b.HasIndex("CongregacaoId");

                    b.HasIndex("PublicadorId")
                        .HasName("FK_PublicadorPrivilegios_Publicador");

                    b.HasIndex("PrivilegioCongregacionalId", "PublicadorId")
                        .HasName("FK_PublicadorPrivilegios_PrivilegioCongregacional");

                    b.ToTable("PublicadorPrivilegios","secretary");
                });

            modelBuilder.Entity("Secretary.API.Models.PublicadorUsuario", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<long>("CongregacaoId");

                    b.Property<DateTime>("DateCreated");

                    b.Property<string>("IPAddress");

                    b.Property<DateTime>("ModifiedDate");

                    b.Property<long>("PublicadorId")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("0");

                    b.Property<long>("UsuarioId")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("0");

                    b.HasKey("Id");

                    b.HasIndex("CongregacaoId");

                    b.HasIndex("PublicadorId")
                        .HasName("FK_PublicadorUsuario_Publicador");

                    b.HasIndex("UsuarioId")
                        .HasName("usuario_id");

                    b.ToTable("PublicadorUsuario","secretary");
                });

            modelBuilder.Entity("Secretary.API.Models.Recibo", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AnoMesReferencia");

                    b.Property<long>("AuditoriaUsuario");

                    b.Property<long>("CongregacaoId");

                    b.Property<DateTime>("Data")
                        .HasColumnType("TIMESTAMP(3)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("TIMESTAMP(3)");

                    b.Property<string>("Destino")
                        .IsRequired()
                        .HasMaxLength(37);

                    b.Property<string>("IPAddress");

                    b.Property<DateTime>("ModifiedDate");

                    b.Property<string>("OutroDestino")
                        .HasMaxLength(255);

                    b.Property<long>("ReuniaoId");

                    b.Property<double>("Valor");

                    b.HasKey("Id");

                    b.HasIndex("CongregacaoId");

                    b.HasIndex("ReuniaoId")
                        .HasName("FK_Recibo_Reuniao");

                    b.ToTable("Recibo","secretary");
                });

            modelBuilder.Entity("Secretary.API.Models.Reuniao", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<long>("AuditoriaUsuario");

                    b.Property<long>("CongregacaoId");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("TIMESTAMP(3)");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<string>("DiaSemana")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("Hora")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("IPAddress");

                    b.Property<DateTime>("ModifiedDate");

                    b.HasKey("Id");

                    b.HasIndex("CongregacaoId")
                        .HasName("FK_Reuniao_Congregacao");

                    b.ToTable("Reuniao","secretary");
                });

            modelBuilder.Entity("Secretary.API.Models.ServicoCampo", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("AnoReferencia");

                    b.Property<long>("CongregacaoId");

                    b.Property<int>("CreditoHoras")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("0");

                    b.Property<DateTime>("DataEntrega")
                        .HasColumnType("TIMESTAMP(3)");

                    b.Property<DateTime>("DataReferencia")
                        .HasColumnType("TIMESTAMP(3)");

                    b.Property<DateTime>("DateCreated");

                    b.Property<int?>("Estudos")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("0");

                    b.Property<int?>("FolhetosBrochuras")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("0");

                    b.Property<int?>("Horas")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("0");

                    b.Property<int>("HorasBetel")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("0");

                    b.Property<string>("IPAddress");

                    b.Property<int?>("Livros")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("0");

                    b.Property<int?>("MesReferencia");

                    b.Property<int?>("Minutos")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("0");

                    b.Property<DateTime>("ModifiedDate");

                    b.Property<string>("Observacao");

                    b.Property<long>("PioneiroId");

                    b.Property<int?>("Publicacoes")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("0");

                    b.Property<long>("PublicadorId");

                    b.Property<int?>("Revisitas")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("0");

                    b.Property<int?>("Revistas")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("0");

                    b.Property<int?>("VideosMostrados")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("0");

                    b.HasKey("Id");

                    b.HasIndex("CongregacaoId")
                        .HasName("FK_ServicoCampo_Congregacao");

                    b.HasIndex("PioneiroId")
                        .HasName("FK_ServicoCampo_Pioneiro");

                    b.HasIndex("PublicadorId")
                        .HasName("FK_ServicoCampo_Publicador");

                    b.HasIndex("CongregacaoId", "PublicadorId")
                        .HasName("FK_ServicoCampo_Congregacao_Publicador");

                    b.HasIndex("CongregacaoId", "PublicadorId", "DataReferencia")
                        .IsUnique()
                        .HasName("FK_ServicoCampo_Congregacao_Publicador_DataReferencia");

                    b.ToTable("ServicoCampo","secretary");
                });

            modelBuilder.Entity("Secretary.API.Models.ServicoCampod", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<long>("CongregacaoId");

                    b.Property<double>("CreditoHoras");

                    b.Property<DateTime>("DateCreated");

                    b.Property<double>("Estudos");

                    b.Property<double>("FolhetosBrochuras");

                    b.Property<double>("Horas");

                    b.Property<double>("HorasBetel");

                    b.Property<string>("IPAddress");

                    b.Property<double>("Livros");

                    b.Property<double>("Minutos");

                    b.Property<DateTime>("ModifiedDate");

                    b.Property<double>("Publicacoes");

                    b.Property<long>("PublicadorId");

                    b.Property<double>("Revisitas");

                    b.Property<double>("Revistas");

                    b.Property<double>("VideosMostrados")
                        .HasColumnName("videos_mostrados");

                    b.HasKey("Id");

                    b.HasIndex("PublicadorId")
                        .HasName("FK_ServicoCampod_Publicador");

                    b.HasIndex("CongregacaoId", "PublicadorId")
                        .HasName("FK_ServicoCampod_Congregacao_Publicador");

                    b.ToTable("ServicoCampod","secretary");
                });

            modelBuilder.Entity("Secretary.API.Models.ServicoCampos", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<long>("CongregacaoId");

                    b.Property<double>("CreditoHoras");

                    b.Property<DateTime>("DateCreated");

                    b.Property<double>("Estudos");

                    b.Property<double>("FolhetosBrochuras");

                    b.Property<double>("Horas");

                    b.Property<double>("HorasBetel");

                    b.Property<string>("IPAddress");

                    b.Property<double>("Livros");

                    b.Property<double>("Minutos");

                    b.Property<DateTime>("ModifiedDate");

                    b.Property<double>("Publicacoes");

                    b.Property<long>("PublicadorId");

                    b.Property<double>("Revisitas");

                    b.Property<double>("Revistas");

                    b.Property<double>("VideosMostrados");

                    b.HasKey("Id");

                    b.HasIndex("PublicadorId")
                        .HasName("FK_ServicoCampos_Publicador");

                    b.HasIndex("CongregacaoId", "PublicadorId")
                        .HasName("FK_ServicoCampos_Congregacao_Publicador");

                    b.ToTable("ServicoCampos","secretary");
                });

            modelBuilder.Entity("Secretary.API.Models.ServicoCampot", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<long>("CongregacaoId");

                    b.Property<double>("CreditoHoras");

                    b.Property<DateTime>("DateCreated");

                    b.Property<double>("Estudos");

                    b.Property<double>("FolhetosBrochuras");

                    b.Property<double>("Horas");

                    b.Property<double>("HorasBetel");

                    b.Property<string>("IPAddress");

                    b.Property<double>("Livros");

                    b.Property<double>("Minutos");

                    b.Property<DateTime>("ModifiedDate");

                    b.Property<double>("Publicacoes");

                    b.Property<long>("PublicadorId");

                    b.Property<double>("Revisitas");

                    b.Property<double>("Revistas");

                    b.Property<double>("VideosMostrados");

                    b.HasKey("Id");

                    b.HasIndex("PublicadorId")
                        .HasName("FK_ServicoCampot_Publicador");

                    b.HasIndex("CongregacaoId", "PublicadorId")
                        .HasName("FK_ServicoCampot_Congregacao_Publicador");

                    b.ToTable("ServicoCampot","secretary");
                });

            modelBuilder.Entity("Secretary.API.Models.Situacao", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<long>("AuditoriaUsuario")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("1");

                    b.Property<long>("CongregacaoId");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("TIMESTAMP(3)");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<string>("IPAddress");

                    b.Property<DateTime>("ModifiedDate");

                    b.HasKey("Id");

                    b.HasIndex("CongregacaoId")
                        .HasName("FK_Situacao_Congregacao");

                    b.HasIndex("Descricao")
                        .HasName("IX_Situacao_Descricao");

                    b.ToTable("Situacao","secretary");
                });

            modelBuilder.Entity("Secretary.API.Models.TipoLogradouro", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<long>("AuditoriaUsuario")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("1");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("TIMESTAMP(3)");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<string>("IPAddress");

                    b.Property<DateTime>("ModifiedDate");

                    b.HasKey("Id");

                    b.HasIndex("Descricao")
                        .HasName("IX_Descricao");

                    b.ToTable("TipoLogradouro","secretary");
                });

            modelBuilder.Entity("Secretary.API.Models.Transferencia", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<long>("AuditoriaUsuario");

                    b.Property<long>("CongregacaoId");

                    b.Property<DateTime>("Data")
                        .HasColumnType("TIMESTAMP(3)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("TIMESTAMP(3)");

                    b.Property<long>("DestinoId");

                    b.Property<string>("IPAddress");

                    b.Property<DateTime>("ModifiedDate");

                    b.Property<string>("Observacao")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<long>("OrigemId");

                    b.Property<long>("PublicadorId");

                    b.HasKey("Id");

                    b.HasIndex("CongregacaoId");

                    b.HasIndex("DestinoId")
                        .HasName("FK_TipoLogradouro_Destino");

                    b.HasIndex("OrigemId")
                        .HasName("FK_TipoLogradouro_Origem");

                    b.HasIndex("PublicadorId")
                        .HasName("FK_TipoLogradouro_Publicador");

                    b.ToTable("Transferencia","secretary");
                });

            modelBuilder.Entity("Secretary.API.Models.Usuario", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<long?>("CongregacaoId");

                    b.Property<DateTime>("DateCreated");

                    b.Property<string>("Email");

                    b.Property<string>("IPAddress");

                    b.Property<DateTime>("ModifiedDate");

                    b.Property<byte[]>("PasswordHarsh")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<long?>("PublicadorId")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("0");

                    b.Property<string>("Username")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("0")
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .HasName("IX_Usuario_Email");

                    b.HasIndex("PublicadorId")
                        .HasName("IX_Usuario_Publicador");

                    b.HasIndex("Username")
                        .IsUnique()
                        .HasName("IX_Usuario_Username");

                    b.HasIndex("CongregacaoId", "PublicadorId")
                        .HasName("IX_Usuario_Congregacao_Publicador");

                    b.ToTable("usuario","secretary");
                });

            modelBuilder.Entity("Secretary.API.Models.AssistenciaReuniao", b =>
                {
                    b.HasOne("Secretary.API.Models.Congregacao", "Congregacao")
                        .WithMany("AssistenciaReuniao")
                        .HasForeignKey("CongregacaoId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Secretary.API.Models.Reuniao", "Reuniao")
                        .WithMany("AssistenciaReuniao")
                        .HasForeignKey("ReuniaoId")
                        .HasConstraintName("AssistenciaReuniao$FK_AssistenciaReuniao_Reuniao")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Secretary.API.Models.Congregacao", b =>
                {
                    b.HasOne("Secretary.API.Models.Estado", "Estado")
                        .WithMany("Congregacao")
                        .HasForeignKey("EstadoId");

                    b.HasOne("Secretary.API.Models.TipoLogradouro", "TipoLogradouro")
                        .WithMany("Congregacao")
                        .HasForeignKey("TipoLogradouroId");
                });

            modelBuilder.Entity("Secretary.API.Models.Dianteira", b =>
                {
                    b.HasOne("Secretary.API.Models.Congregacao", "Congregacao")
                        .WithMany("Dianteira")
                        .HasForeignKey("CongregacaoId")
                        .HasConstraintName("Dianteira$FK_Dianteira_Congregacao")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Secretary.API.Models.Estado", b =>
                {
                    b.HasOne("Secretary.API.Models.Country", "Country")
                        .WithMany("Estado")
                        .HasForeignKey("CountryId")
                        .HasConstraintName("Dianteira$FK_Estado_Country")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Secretary.API.Models.Familia", b =>
                {
                    b.HasOne("Secretary.API.Models.Publicador", "ChefeFamilia")
                        .WithMany("FamiliaChefeFamilia")
                        .HasForeignKey("ChefeFamiliaId")
                        .HasConstraintName("familia$FK_Familia_ChefeFamilia");

                    b.HasOne("Secretary.API.Models.Congregacao", "Congregacao")
                        .WithMany("Familia")
                        .HasForeignKey("CongregacaoId")
                        .HasConstraintName("familia$FK_Familia_Congregacao")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Secretary.API.Models.Publicador", "Membro")
                        .WithMany("FamiliaMembro")
                        .HasForeignKey("MembroId")
                        .HasConstraintName("familia$FK_Familia_Membro");
                });

            modelBuilder.Entity("Secretary.API.Models.Familiares", b =>
                {
                    b.HasOne("Secretary.API.Models.Congregacao", "Congregacao")
                        .WithMany("Familiares")
                        .HasForeignKey("CongregacaoId")
                        .HasConstraintName("familia$FK_Familiares_Congregacao")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Secretary.API.Models.Publicador", "Membro")
                        .WithMany("FamiliaresMembro")
                        .HasForeignKey("MembroId")
                        .HasConstraintName("familiares$FK_Familiares_Membro");

                    b.HasOne("Secretary.API.Models.Publicador", "Publicador")
                        .WithMany("FamiliaresPublicador")
                        .HasForeignKey("PublicadorId")
                        .HasConstraintName("familiares$FK_Familiares_Publicador");
                });

            modelBuilder.Entity("Secretary.API.Models.Grupo", b =>
                {
                    b.HasOne("Secretary.API.Models.Publicador", "Ajudante")
                        .WithMany("GrupoAjudante")
                        .HasForeignKey("AjudanteId")
                        .HasConstraintName("grupo$FK_Grupo_Ajudante");

                    b.HasOne("Secretary.API.Models.Congregacao", "Congregacao")
                        .WithMany("Grupo")
                        .HasForeignKey("CongregacaoId")
                        .HasConstraintName("grupo$FK_Grupo_Congregacao")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Secretary.API.Models.Publicador", "Superintendente")
                        .WithMany("GrupoSuperintendente")
                        .HasForeignKey("SuperintendenteId")
                        .HasConstraintName("grupo$FK_Grupo_Superintendente");
                });

            modelBuilder.Entity("Secretary.API.Models.PeticaoPioneiroAuxiliar", b =>
                {
                    b.HasOne("Secretary.API.Models.Congregacao", "Congregacao")
                        .WithMany()
                        .HasForeignKey("CongregacaoId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Secretary.API.Models.Pioneiro", "Pioneiro")
                        .WithMany()
                        .HasForeignKey("PioneiroId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Secretary.API.Models.Publicador", "Publicador")
                        .WithMany("PeticaoPioneiroAuxiliar")
                        .HasForeignKey("PublicadorId")
                        .HasConstraintName("peticao$FK_PeticaoPioneiroAuxiliar_Publicador")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Secretary.API.Models.Pioneiro", b =>
                {
                    b.HasOne("Secretary.API.Models.Congregacao", "Congregacao")
                        .WithMany("Pioneiro")
                        .HasForeignKey("CongregacaoId")
                        .HasConstraintName("grupo$FK_Pioneiro_Congregacao")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Secretary.API.Models.PrivilegioCongregacional", b =>
                {
                    b.HasOne("Secretary.API.Models.Congregacao", "Congregacao")
                        .WithMany("PrivilegioCongregacional")
                        .HasForeignKey("CongregacaoId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Secretary.API.Models.Publicador", b =>
                {
                    b.HasOne("Secretary.API.Models.Congregacao", "Congregacao")
                        .WithMany("Publicador")
                        .HasForeignKey("CongregacaoId")
                        .HasConstraintName("publicador$FK_Publicador_Congregacao")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Secretary.API.Models.Dianteira", "Dianteira")
                        .WithMany("Publicador")
                        .HasForeignKey("DianteiraId")
                        .HasConstraintName("publicador$FK_Publicador_Dianteira");

                    b.HasOne("Secretary.API.Models.Estado", "Estado")
                        .WithMany("Publicador")
                        .HasForeignKey("EstadoId")
                        .HasConstraintName("publicador$FK_Publicador_Estado");

                    b.HasOne("Secretary.API.Models.Grupo", "Grupo")
                        .WithMany("Publicador")
                        .HasForeignKey("GrupoId")
                        .HasConstraintName("publicador$FK_Publicador_Grupo");

                    b.HasOne("Secretary.API.Models.Pioneiro", "Pioneiro")
                        .WithMany("Publicador")
                        .HasForeignKey("PioneiroId")
                        .HasConstraintName("publicador$FK_Publicador_Pioneiro");

                    b.HasOne("Secretary.API.Models.Situacao", "Situacao")
                        .WithMany("Publicador")
                        .HasForeignKey("SituacaoId")
                        .HasConstraintName("publicador$FK_Publicador_Situacao");

                    b.HasOne("Secretary.API.Models.TipoLogradouro", "TipoLogradouro")
                        .WithMany("Publicador")
                        .HasForeignKey("TipoLogradouroId")
                        .HasConstraintName("publicador$FK_Publicador_TipoLogradouro");
                });

            modelBuilder.Entity("Secretary.API.Models.PublicadorHistorico", b =>
                {
                    b.HasOne("Secretary.API.Models.Congregacao", "Congregacao")
                        .WithMany()
                        .HasForeignKey("CongregacaoId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Secretary.API.Models.Publicador", "Publicador")
                        .WithMany("PublicadorHistorico")
                        .HasForeignKey("PublicadorId")
                        .HasConstraintName("publicador_historico$FK_PublicadorHistorico_Publicador")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Secretary.API.Models.PublicadorPrivilegios", b =>
                {
                    b.HasOne("Secretary.API.Models.Congregacao", "Congregacao")
                        .WithMany()
                        .HasForeignKey("CongregacaoId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Secretary.API.Models.PrivilegioCongregacional", "PrivilegioCongregacional")
                        .WithMany("PublicadorPrivilegios")
                        .HasForeignKey("PrivilegioCongregacionalId")
                        .HasConstraintName("publicador_privilegios$FK_PublicadorPrivilegios_PrivilegioCongregacional");

                    b.HasOne("Secretary.API.Models.Publicador", "Publicador")
                        .WithMany("PublicadorPrivilegios")
                        .HasForeignKey("PublicadorId")
                        .HasConstraintName("publicador_privilegios$FK_PublicadorPrivilegios_Publicador");
                });

            modelBuilder.Entity("Secretary.API.Models.PublicadorUsuario", b =>
                {
                    b.HasOne("Secretary.API.Models.Congregacao", "Congregacao")
                        .WithMany()
                        .HasForeignKey("CongregacaoId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Secretary.API.Models.Recibo", b =>
                {
                    b.HasOne("Secretary.API.Models.Congregacao", "Congregacao")
                        .WithMany()
                        .HasForeignKey("CongregacaoId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Secretary.API.Models.Reuniao", "Reuniao")
                        .WithMany("Recibo")
                        .HasForeignKey("ReuniaoId")
                        .HasConstraintName("recibo$FK_Recibo_Reuniao")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Secretary.API.Models.Reuniao", b =>
                {
                    b.HasOne("Secretary.API.Models.Congregacao", "Congregacao")
                        .WithMany("Reuniao")
                        .HasForeignKey("CongregacaoId")
                        .HasConstraintName("reuniao$FK_Reuniao_Congregacao")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Secretary.API.Models.ServicoCampo", b =>
                {
                    b.HasOne("Secretary.API.Models.Congregacao", "Congregacao")
                        .WithMany("ServicoCampo")
                        .HasForeignKey("CongregacaoId")
                        .HasConstraintName("servico_campo$FK_ServicoCampo_Congregacao")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Secretary.API.Models.Pioneiro", "Pioneiro")
                        .WithMany("ServicoCampo")
                        .HasForeignKey("PioneiroId")
                        .HasConstraintName("servico_campo$FK_ServicoCampo_Pioneiro");

                    b.HasOne("Secretary.API.Models.Publicador", "Publicador")
                        .WithMany("ServicoCampo")
                        .HasForeignKey("PublicadorId")
                        .HasConstraintName("servico_campo$FK_ServicoCampo_Publicador")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Secretary.API.Models.ServicoCampod", b =>
                {
                    b.HasOne("Secretary.API.Models.Congregacao", "Congregacao")
                        .WithMany("ServicoCampod")
                        .HasForeignKey("CongregacaoId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Secretary.API.Models.Publicador", "Publicador")
                        .WithMany("ServicoCampod")
                        .HasForeignKey("PublicadorId")
                        .HasConstraintName("servico_campod$FK_ServicoCampod_Publicador")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Secretary.API.Models.ServicoCampos", b =>
                {
                    b.HasOne("Secretary.API.Models.Congregacao", "Congregacao")
                        .WithMany("ServicoCampos")
                        .HasForeignKey("CongregacaoId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Secretary.API.Models.Publicador", "Publicador")
                        .WithMany("ServicoCampos")
                        .HasForeignKey("PublicadorId")
                        .HasConstraintName("servico_campos$FK_ServicoCampos_Publicador")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Secretary.API.Models.ServicoCampot", b =>
                {
                    b.HasOne("Secretary.API.Models.Congregacao", "Congregacao")
                        .WithMany("ServicoCampot")
                        .HasForeignKey("CongregacaoId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Secretary.API.Models.Publicador", "Publicador")
                        .WithMany("ServicoCampot")
                        .HasForeignKey("PublicadorId")
                        .HasConstraintName("servico_campot$FK_ServicoCampot_Publicador")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Secretary.API.Models.Situacao", b =>
                {
                    b.HasOne("Secretary.API.Models.Congregacao", "Congregacao")
                        .WithMany("Situacao")
                        .HasForeignKey("CongregacaoId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Secretary.API.Models.Transferencia", b =>
                {
                    b.HasOne("Secretary.API.Models.Congregacao", "Congregacao")
                        .WithMany()
                        .HasForeignKey("CongregacaoId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Secretary.API.Models.Congregacao", "Destino")
                        .WithMany("TransferenciaDestino")
                        .HasForeignKey("DestinoId")
                        .HasConstraintName("transferencia$FK_TipoLogradouro_Destino");

                    b.HasOne("Secretary.API.Models.Congregacao", "Origem")
                        .WithMany("TransferenciaOrigem")
                        .HasForeignKey("OrigemId")
                        .HasConstraintName("transferencia$FK_TipoLogradouro_Origem");

                    b.HasOne("Secretary.API.Models.Publicador", "Publicador")
                        .WithMany("Transferencia")
                        .HasForeignKey("PublicadorId")
                        .HasConstraintName("transferencia$FK_TipoLogradouro_Publicador");
                });

            modelBuilder.Entity("Secretary.API.Models.Usuario", b =>
                {
                    b.HasOne("Secretary.API.Models.Congregacao", "Congregacao")
                        .WithMany()
                        .HasForeignKey("CongregacaoId");

                    b.HasOne("Secretary.API.Models.Publicador", "Publicador")
                        .WithMany("Usuario")
                        .HasForeignKey("PublicadorId")
                        .HasConstraintName("usuario$IX_Usuario_Publicador")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
