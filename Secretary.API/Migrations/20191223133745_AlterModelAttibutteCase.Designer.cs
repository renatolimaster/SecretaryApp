// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Secretary.API.Data;

namespace Secretary.API.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20191223133745_AlterModelAttibutteCase")]
    partial class AlterModelAttibutteCase
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn)
                .HasAnnotation("ProductVersion", "2.2.4-servicing-10062")
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("Relational:Sequence:.AssistenciaReuniao_Id_seq", "'AssistenciaReuniao_Id_seq', '', '1', '1', '', '', 'Int64', 'False'")
                .HasAnnotation("Relational:Sequence:.Congregacao_Id_seq", "'Congregacao_Id_seq', '', '1', '1', '', '', 'Int64', 'False'")
                .HasAnnotation("Relational:Sequence:.Country_Id_seq", "'Country_Id_seq', '', '1', '1', '', '', 'Int64', 'False'")
                .HasAnnotation("Relational:Sequence:.Dianteira_Id_seq", "'Dianteira_Id_seq', '', '1', '1', '', '', 'Int64', 'False'")
                .HasAnnotation("Relational:Sequence:.Estado_Id_seq", "'Estado_Id_seq', '', '1', '1', '', '', 'Int64', 'False'")
                .HasAnnotation("Relational:Sequence:.Familia_Id_seq", "'Familia_Id_seq', '', '1', '1', '', '', 'Int64', 'False'")
                .HasAnnotation("Relational:Sequence:.Familiares_Id_seq", "'Familiares_Id_seq', '', '1', '1', '', '', 'Int64', 'False'")
                .HasAnnotation("Relational:Sequence:.Grupo_Id_seq", "'Grupo_Id_seq', '', '1', '1', '', '', 'Int64', 'False'")
                .HasAnnotation("Relational:Sequence:.PeticaoPioneiroAuxiliar_Id_seq", "'PeticaoPioneiroAuxiliar_Id_seq', '', '1', '1', '', '', 'Int64', 'False'")
                .HasAnnotation("Relational:Sequence:.Pioneiro_Id_seq", "'Pioneiro_Id_seq', '', '1', '1', '', '', 'Int64', 'False'")
                .HasAnnotation("Relational:Sequence:.PrivilegioCongregacional_Id_seq", "'PrivilegioCongregacional_Id_seq', '', '1', '1', '', '', 'Int64', 'False'")
                .HasAnnotation("Relational:Sequence:.Publicador_Id_seq", "'Publicador_Id_seq', '', '1', '1', '', '', 'Int64', 'False'")
                .HasAnnotation("Relational:Sequence:.PublicadorHistorico_Id_seq", "'PublicadorHistorico_Id_seq', '', '1', '1', '', '', 'Int64', 'False'")
                .HasAnnotation("Relational:Sequence:.PublicadorPrivilegios_Id_seq", "'PublicadorPrivilegios_Id_seq', '', '1', '1', '', '', 'Int64', 'False'")
                .HasAnnotation("Relational:Sequence:.PublicadorUsuario_Id_seq", "'PublicadorUsuario_Id_seq', '', '1', '1', '', '', 'Int64', 'False'")
                .HasAnnotation("Relational:Sequence:.Recibo_Id_seq", "'Recibo_Id_seq', '', '1', '1', '', '', 'Int64', 'False'")
                .HasAnnotation("Relational:Sequence:.Reuniao_Id_seq", "'Reuniao_Id_seq', '', '1', '1', '', '', 'Int64', 'False'")
                .HasAnnotation("Relational:Sequence:.ServicoCampo_Id_seq", "'ServicoCampo_Id_seq', '', '1', '1', '', '', 'Int64', 'False'")
                .HasAnnotation("Relational:Sequence:.ServicoCampod_Id_seq", "'ServicoCampod_Id_seq', '', '1', '1', '', '', 'Int64', 'False'")
                .HasAnnotation("Relational:Sequence:.ServicoCampos_Id_seq", "'ServicoCampos_Id_seq', '', '1', '1', '', '', 'Int64', 'False'")
                .HasAnnotation("Relational:Sequence:.ServicoCampot_Id_seq", "'ServicoCampot_Id_seq', '', '1', '1', '', '', 'Int64', 'False'")
                .HasAnnotation("Relational:Sequence:.Situacao_Id_seq", "'Situacao_Id_seq', '', '1', '1', '', '', 'Int64', 'False'")
                .HasAnnotation("Relational:Sequence:.TipoLogradouro_Id_seq", "'TipoLogradouro_Id_seq', '', '1', '1', '', '', 'Int64', 'False'")
                .HasAnnotation("Relational:Sequence:.Transferencia_Id_seq", "'Transferencia_Id_seq', '', '1', '1', '', '', 'Int64', 'False'")
                .HasAnnotation("Relational:Sequence:.usuario_Id_seq", "'usuario_Id_seq', '', '1', '1', '', '', 'Int64', 'False'");

            modelBuilder.Entity("Secretary.API.Model.AssistenciaReuniao", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("nextval('secretary.\"AssistenciaReuniao_Id_seq\"'::regclass)");

                    b.Property<int?>("AnoReferencia");

                    b.Property<long>("AuditoriaUsuario")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("1");

                    b.Property<long>("CongregacaoId")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("1");

                    b.Property<DateTime>("DataReferencia")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp(3) without time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<DateTime>("DateCreated")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("now()");

                    b.Property<int?>("Estrangeiros1");

                    b.Property<int?>("Estrangeiros2");

                    b.Property<int?>("Estrangeiros3");

                    b.Property<int?>("Estrangeiros4");

                    b.Property<int?>("Estrangeiros5");

                    b.Property<string>("Ipaddress")
                        .HasColumnName("IPAddress");

                    b.Property<double?>("Media");

                    b.Property<int?>("MesReferencia");

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("now()");

                    b.Property<long>("ReuniaoId")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("1");

                    b.Property<int?>("Semana1");

                    b.Property<int?>("Semana2");

                    b.Property<int?>("Semana3");

                    b.Property<int?>("Semana4");

                    b.Property<int?>("Semana5");

                    b.Property<int?>("Total");

                    b.HasKey("Id");

                    b.HasIndex("CongregacaoId")
                        .HasName("FK_AssistenciaReuniao_Congregacao");

                    b.HasIndex("ReuniaoId")
                        .HasName("FK_AssistenciaReuniao_Reuniao");

                    b.ToTable("AssistenciaReuniao","secretary");
                });

            modelBuilder.Entity("Secretary.API.Model.Congregacao", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("nextval('secretary.\"Congregacao_Id_seq\"'::regclass)");

                    b.Property<long>("AuditoriaUsuario")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("1");

                    b.Property<string>("Bairro")
                        .HasMaxLength(255);

                    b.Property<string>("Cep")
                        .HasMaxLength(255);

                    b.Property<string>("Cidade")
                        .HasMaxLength(255);

                    b.Property<string>("Complemento")
                        .HasMaxLength(255);

                    b.Property<string>("Coordenador")
                        .HasMaxLength(255);

                    b.Property<DateTime>("DateCreated")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("now()");

                    b.Property<string>("Email")
                        .HasMaxLength(255);

                    b.Property<long?>("EstadoId");

                    b.Property<string>("Ipaddress")
                        .HasColumnName("IPAddress");

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("now()");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<string>("NomeLogradouro")
                        .HasMaxLength(255);

                    b.Property<string>("Numero")
                        .HasMaxLength(255);

                    b.Property<bool>("Padrao");

                    b.Property<string>("TelCelular")
                        .HasMaxLength(255);

                    b.Property<string>("TelResidencial")
                        .HasMaxLength(255);

                    b.Property<string>("TelTrabalho")
                        .HasMaxLength(255);

                    b.Property<string>("Telefone")
                        .HasMaxLength(255);

                    b.Property<long?>("TipoLogradouroId");

                    b.HasKey("Id");

                    b.HasIndex("EstadoId")
                        .HasName("FK_Congregacao_Estado");

                    b.HasIndex("TipoLogradouroId")
                        .HasName("FK_Congregacao_TipoLogradouro");

                    b.ToTable("Congregacao","secretary");
                });

            modelBuilder.Entity("Secretary.API.Model.Country", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("nextval('secretary.\"Country_Id_seq\"'::regclass)");

                    b.Property<int>("AreaInSqKm");

                    b.Property<string>("Capital");

                    b.Property<string>("Continent");

                    b.Property<string>("ContinentName");

                    b.Property<string>("CountryCode");

                    b.Property<string>("CountryName");

                    b.Property<string>("CurrencyCode");

                    b.Property<DateTime>("DateCreated")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("now()");

                    b.Property<int>("East");

                    b.Property<int>("FipsCode");

                    b.Property<int>("GeonameId");

                    b.Property<string>("IPAddress")
                        .HasColumnName("IPAddress");

                    b.Property<string>("Iso");

                    b.Property<string>("Iso3");

                    b.Property<string>("IsoAlpha3");

                    b.Property<string>("IsoNumeric");

                    b.Property<string>("Languages");

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("now()");

                    b.Property<string>("Name");

                    b.Property<string>("NiceName");

                    b.Property<int>("North");

                    b.Property<int?>("NumCode");

                    b.Property<int>("PhoneCode");

                    b.Property<int>("Population");

                    b.Property<int>("South");

                    b.Property<int>("West");

                    b.HasKey("Id");

                    b.HasIndex("CountryCode")
                        .HasName("FK_Country_CountryCode");

                    b.HasIndex("CountryName")
                        .HasName("FK_Country_CountryName");

                    b.HasIndex("Name")
                        .HasName("FK_Country_Name");

                    b.ToTable("Country","secretary");
                });

            modelBuilder.Entity("Secretary.API.Model.Dianteira", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("nextval('secretary.\"Dianteira_Id_seq\"'::regclass)");

                    b.Property<long>("AuditoriaUsuario")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("1");

                    b.Property<long>("CongregacaoId")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("1");

                    b.Property<DateTime>("DateCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp(3) without time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<string>("Ipaddress")
                        .HasColumnName("IPAddress");

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("now()");

                    b.HasKey("Id");

                    b.HasIndex("CongregacaoId")
                        .HasName("FK_Dianteira_Congregacao");

                    b.ToTable("Dianteira","secretary");
                });

            modelBuilder.Entity("Secretary.API.Model.Estado", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("nextval('secretary.\"Estado_Id_seq\"'::regclass)");

                    b.Property<string>("AdminCode1");

                    b.Property<string>("AdminCodes1_ISO3166_2");

                    b.Property<string>("AdminName1");

                    b.Property<long>("AuditoriaUsuario")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("1");

                    b.Property<string>("CountryCode");

                    b.Property<long?>("CountryId");

                    b.Property<string>("CountryName");

                    b.Property<DateTime>("DateCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp(3) without time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<string>("Fcl");

                    b.Property<string>("FclName");

                    b.Property<string>("Fcode");

                    b.Property<string>("FcodeName");

                    b.Property<int>("GeonameId");

                    b.Property<string>("Ipaddress")
                        .HasColumnName("IPAddress");

                    b.Property<string>("Lat");

                    b.Property<string>("Lng");

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("now()");

                    b.Property<string>("Name");

                    b.Property<int>("Population");

                    b.Property<string>("ToponymName");

                    b.HasKey("Id");

                    b.HasIndex("AdminCode1")
                        .HasName("FK_Estado_AdminCode1");

                    b.HasIndex("CountryId")
                        .HasName("FK_Estado_Country");

                    b.HasIndex("CountryName")
                        .HasName("FK_Estado_CountryName");

                    b.HasIndex("GeonameId")
                        .HasName("FK_Estado_GeonameId");

                    b.HasIndex("Name")
                        .HasName("FK_Estado_Name");

                    b.HasIndex("ToponymName")
                        .HasName("FK_Estado_ToponymName");

                    b.ToTable("Estado","secretary");
                });

            modelBuilder.Entity("Secretary.API.Model.Familia", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("nextval('secretary.\"Familia_Id_seq\"'::regclass)");

                    b.Property<long>("AuditoriaUsuario");

                    b.Property<long>("ChefeFamiliaId");

                    b.Property<long>("CongregacaoId");

                    b.Property<DateTime>("DateCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp(3) without time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("Ipaddress")
                        .HasColumnName("IPAddress");

                    b.Property<long>("MembroId");

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("now()");

                    b.Property<string>("Parentesco")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.HasKey("Id");

                    b.HasIndex("ChefeFamiliaId")
                        .HasName("FK_Familia_ChefeFamilia");

                    b.HasIndex("CongregacaoId")
                        .HasName("FK_Familia_Congregacao");

                    b.HasIndex("MembroId")
                        .HasName("FK_Membro");

                    b.ToTable("Familia","secretary");
                });

            modelBuilder.Entity("Secretary.API.Model.Familiares", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("nextval('secretary.\"Familiares_Id_seq\"'::regclass)");

                    b.Property<long>("AuditoriaUsuario");

                    b.Property<long>("CongregacaoId");

                    b.Property<DateTime>("DateCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp(3) without time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("Ipaddress")
                        .HasColumnName("IPAddress");

                    b.Property<long>("MembroId");

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("now()");

                    b.Property<string>("Observacao")
                        .HasMaxLength(255);

                    b.Property<string>("Parentesco")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<long>("PublicadorId");

                    b.HasKey("Id");

                    b.HasIndex("CongregacaoId")
                        .HasName("FK_Familiares_Congregacao");

                    b.HasIndex("MembroId")
                        .HasName("FK_Familiares_Membro");

                    b.HasIndex("PublicadorId")
                        .HasName("FK_Familiares_Publicador");

                    b.ToTable("Familiares","secretary");
                });

            modelBuilder.Entity("Secretary.API.Model.Grupo", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("nextval('secretary.\"Grupo_Id_seq\"'::regclass)");

                    b.Property<long?>("AjudanteId");

                    b.Property<long>("AuditoriaUsuario")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("1");

                    b.Property<long>("CongregacaoId")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("1");

                    b.Property<DateTime>("DateCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp(3) without time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("Ipaddress")
                        .HasColumnName("IPAddress");

                    b.Property<string>("Local")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("now()");

                    b.Property<long?>("SuperintendenteId");

                    b.HasKey("Id");

                    b.HasIndex("AjudanteId")
                        .HasName("FK_Grupo_Ajudante");

                    b.HasIndex("CongregacaoId")
                        .HasName("FK_Grupo_Congregacao");

                    b.HasIndex("SuperintendenteId")
                        .HasName("FK_Grupo_Superintendente");

                    b.ToTable("Grupo","secretary");
                });

            modelBuilder.Entity("Secretary.API.Model.PeticaoPioneiroAuxiliar", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("nextval('secretary.\"PeticaoPioneiroAuxiliar_Id_seq\"'::regclass)");

                    b.Property<long>("CongregacaoId");

                    b.Property<DateTime>("DateCreated")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("now()");

                    b.Property<bool>("EstaAprovado");

                    b.Property<string>("Ipaddress")
                        .HasColumnName("IPAddress");

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("now()");

                    b.Property<string>("Observacao")
                        .HasMaxLength(255);

                    b.Property<long>("PioneiroId");

                    b.Property<long>("PublicadorId");

                    b.Property<DateTime>("ReferenciaFinal");

                    b.Property<DateTime>("ReferenciaInicial");

                    b.HasKey("Id");

                    b.HasIndex("CongregacaoId")
                        .HasName("FK_PeticaoPioneiroAuxiliar_Congregacao");

                    b.HasIndex("PioneiroId")
                        .HasName("FK_PeticaoPioneiroAuxiliar_Pioneiro");

                    b.HasIndex("PublicadorId")
                        .HasName("FK_PeticaoPioneiroAuxiliar_Publicador");

                    b.ToTable("PeticaoPioneiroAuxiliar","secretary");
                });

            modelBuilder.Entity("Secretary.API.Model.Pioneiro", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("nextval('secretary.\"Pioneiro_Id_seq\"'::regclass)");

                    b.Property<long>("AuditoriaUsuario")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("1");

                    b.Property<long>("CongregacaoId")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("1");

                    b.Property<DateTime>("DateCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp(3) without time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("Ipaddress")
                        .HasColumnName("IPAddress");

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("now()");

                    b.Property<string>("Observacao")
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.HasIndex("CongregacaoId")
                        .HasName("FK_Pioneiro_Congregacao");

                    b.ToTable("Pioneiro","secretary");
                });

            modelBuilder.Entity("Secretary.API.Model.PrivilegioCongregacional", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("nextval('secretary.\"PrivilegioCongregacional_Id_seq\"'::regclass)");

                    b.Property<long>("AuditoriaUsuario")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("1");

                    b.Property<long>("CongregacaoId")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("1");

                    b.Property<DateTime>("DateCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp(3) without time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<string>("Ipaddress")
                        .HasColumnName("IPAddress");

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("now()");

                    b.Property<string>("Observacao")
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.HasIndex("CongregacaoId")
                        .HasName("FK_PrivilegioCongregacional_Congregacao");

                    b.ToTable("PrivilegioCongregacional","secretary");
                });

            modelBuilder.Entity("Secretary.API.Model.Publicador", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("nextval('secretary.\"Publicador_Id_seq\"'::regclass)");

                    b.Property<string>("Anointed");

                    b.Property<long>("AuditoriaUsuario")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("1");

                    b.Property<string>("Bairro")
                        .HasMaxLength(255);

                    b.Property<DateTime?>("Batismo")
                        .HasColumnType("timestamp(3) without time zone");

                    b.Property<string>("Cep")
                        .HasMaxLength(255);

                    b.Property<bool>("ChefeFamilia");

                    b.Property<string>("Cidade")
                        .HasMaxLength(255);

                    b.Property<string>("Complemento")
                        .HasMaxLength(255);

                    b.Property<long>("CongregacaoId")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("1");

                    b.Property<long>("CountryId")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("30");

                    b.Property<DateTime?>("DataAnciao")
                        .HasColumnType("timestamp(3) without time zone");

                    b.Property<DateTime?>("DataInativo")
                        .HasColumnType("timestamp(3) without time zone");

                    b.Property<DateTime?>("DataInicioServico")
                        .HasColumnType("timestamp(3) without time zone");

                    b.Property<DateTime?>("DataNascimento")
                        .HasColumnType("timestamp(3) without time zone");

                    b.Property<DateTime?>("DataReativado")
                        .HasColumnType("timestamp(3) without time zone");

                    b.Property<DateTime?>("DataServoMinisterial")
                        .HasColumnType("timestamp(3) without time zone");

                    b.Property<DateTime>("DateCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp(3) without time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<long?>("DianteiraId");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<long?>("EstadoId");

                    b.Property<long?>("GrupoId");

                    b.Property<DateTime?>("InicioPioneiro")
                        .HasColumnType("timestamp(3) without time zone");

                    b.Property<string>("Ipaddress")
                        .HasColumnName("IPAddress");

                    b.Property<bool>("IrmaoBatizado");

                    b.Property<string>("Login")
                        .HasMaxLength(255);

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("now()");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<string>("NomeLogradouro")
                        .HasMaxLength(255);

                    b.Property<string>("NumeroPioneiro")
                        .HasMaxLength(255);

                    b.Property<string>("Observacao");

                    b.Property<string>("Perfil")
                        .HasMaxLength(255);

                    b.Property<long?>("PioneiroId");

                    b.Property<string>("Senha")
                        .HasMaxLength(255);

                    b.Property<string>("Sexo")
                        .HasMaxLength(255);

                    b.Property<long>("SituacaoId")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("1");

                    b.Property<string>("SituacaoServicoCampo")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("'Irregular'::character varying")
                        .HasMaxLength(9);

                    b.Property<string>("TelCelular")
                        .HasMaxLength(255);

                    b.Property<string>("TelResidencial")
                        .HasMaxLength(255);

                    b.Property<string>("TelTrabalho")
                        .HasMaxLength(255);

                    b.Property<long?>("TipoLogradouroId");

                    b.HasKey("Id");

                    b.HasIndex("CongregacaoId")
                        .HasName("FK_Publicador_Congregacao");

                    b.HasIndex("CountryId")
                        .HasName("publicador$FK_Publicador_Country");

                    b.HasIndex("DianteiraId")
                        .HasName("FK_Publicador_Dianteira");

                    b.HasIndex("EstadoId")
                        .HasName("FK_Publicador_Estado");

                    b.HasIndex("GrupoId")
                        .HasName("FK__PublicadorGrupo");

                    b.HasIndex("PioneiroId")
                        .HasName("FK_Publicador_Pioneiro");

                    b.HasIndex("SituacaoId")
                        .HasName("FK_Publicador_Situacao");

                    b.HasIndex("TipoLogradouroId")
                        .HasName("FK_Publicador_TipoLogradouro");

                    b.ToTable("Publicador","secretary");
                });

            modelBuilder.Entity("Secretary.API.Model.PublicadorHistorico", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("nextval('secretary.\"PublicadorHistorico_Id_seq\"'::regclass)");

                    b.Property<long>("CongregacaoId");

                    b.Property<DateTime>("DataReferencia")
                        .HasColumnType("timestamp(3) without time zone");

                    b.Property<DateTime>("DateCreated")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("now()");

                    b.Property<string>("Evento")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<string>("Ipaddress")
                        .HasColumnName("IPAddress");

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("now()");

                    b.Property<string>("Observacao");

                    b.Property<long>("PublicadorId");

                    b.HasKey("Id");

                    b.HasIndex("CongregacaoId");

                    b.HasIndex("PublicadorId")
                        .HasName("FK_PublicadorHistorico_Publicador");

                    b.ToTable("PublicadorHistorico","secretary");
                });

            modelBuilder.Entity("Secretary.API.Model.PublicadorPrivilegios", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("nextval('secretary.\"PublicadorPrivilegios_Id_seq\"'::regclass)");

                    b.Property<long>("CongregacaoId")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("1");

                    b.Property<DateTime>("DateCreated")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("now()");

                    b.Property<string>("Ipaddress")
                        .HasColumnName("IPAddress");

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("now()");

                    b.Property<long>("PrivilegioCongregacionalId")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("15");

                    b.Property<long>("PublicadorId")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("1");

                    b.HasKey("Id");

                    b.HasIndex("CongregacaoId");

                    b.HasIndex("PublicadorId")
                        .HasName("FK_PublicadorPrivilegios_Publicador");

                    b.HasIndex("PrivilegioCongregacionalId", "PublicadorId")
                        .HasName("FK_PublicadorPrivilegios_PrivilegioCongregacional");

                    b.ToTable("PublicadorPrivilegios","secretary");
                });

            modelBuilder.Entity("Secretary.API.Model.PublicadorUsuario", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("nextval('secretary.\"PublicadorUsuario_Id_seq\"'::regclass)");

                    b.Property<long>("CongregacaoId");

                    b.Property<DateTime>("DateCreated")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("now()");

                    b.Property<string>("Ipaddress")
                        .HasColumnName("IPAddress");

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("now()");

                    b.Property<long>("PublicadorId");

                    b.Property<long>("UsuarioId");

                    b.HasKey("Id");

                    b.HasIndex("CongregacaoId");

                    b.HasIndex("PublicadorId")
                        .HasName("FK_PublicadorUsuario_Publicador");

                    b.HasIndex("UsuarioId")
                        .HasName("usuario_id");

                    b.ToTable("PublicadorUsuario","secretary");
                });

            modelBuilder.Entity("Secretary.API.Model.Recibo", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("nextval('secretary.\"Recibo_Id_seq\"'::regclass)");

                    b.Property<int>("AnoMesReferencia");

                    b.Property<long>("AuditoriaUsuario");

                    b.Property<long>("CongregacaoId");

                    b.Property<DateTime>("Data")
                        .HasColumnType("timestamp(3) without time zone");

                    b.Property<DateTime>("DateCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp(3) without time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("Destino")
                        .IsRequired()
                        .HasMaxLength(37);

                    b.Property<string>("Ipaddress")
                        .HasColumnName("IPAddress");

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("now()");

                    b.Property<string>("OutroDestino")
                        .HasMaxLength(255);

                    b.Property<long>("ReuniaoId");

                    b.Property<double>("Valor");

                    b.HasKey("Id");

                    b.HasIndex("CongregacaoId");

                    b.HasIndex("ReuniaoId")
                        .HasName("FK_Recibo_Reuniao");

                    b.ToTable("Recibo","secretary");
                });

            modelBuilder.Entity("Secretary.API.Model.Reuniao", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("nextval('secretary.\"Reuniao_Id_seq\"'::regclass)");

                    b.Property<long>("AuditoriaUsuario")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("1");

                    b.Property<long>("CongregacaoId")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("1");

                    b.Property<DateTime>("DateCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp(3) without time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<string>("DiaSemana")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("1")
                        .HasMaxLength(50);

                    b.Property<string>("Hora")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("Ipaddress")
                        .HasColumnName("IPAddress");

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("now()");

                    b.HasKey("Id");

                    b.HasIndex("CongregacaoId")
                        .HasName("FK_Reuniao_Congregacao");

                    b.ToTable("Reuniao","secretary");
                });

            modelBuilder.Entity("Secretary.API.Model.ServicoCampo", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("nextval('secretary.\"ServicoCampo_Id_seq\"'::regclass)");

                    b.Property<int?>("AnoReferencia");

                    b.Property<long>("CongregacaoId")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("1");

                    b.Property<int>("CreditoHoras");

                    b.Property<DateTime>("DataEntrega")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp(3) without time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<DateTime>("DataReferencia")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp(3) without time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<DateTime>("DateCreated")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("now()");

                    b.Property<int?>("Estudos")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("0");

                    b.Property<int?>("FolhetosBrochuras")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("0");

                    b.Property<int?>("Horas")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("0");

                    b.Property<int>("HorasBetel");

                    b.Property<string>("Ipaddress")
                        .HasColumnName("IPAddress");

                    b.Property<int?>("Livros")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("0");

                    b.Property<int?>("MesReferencia");

                    b.Property<int?>("Minutos")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("0");

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("now()");

                    b.Property<string>("Observacao");

                    b.Property<long>("PioneiroId")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("1");

                    b.Property<int?>("Publicacoes")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("0");

                    b.Property<long>("PublicadorId")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("1");

                    b.Property<int?>("Revisitas")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("0");

                    b.Property<int?>("Revistas")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("0");

                    b.Property<int?>("VideosMostrados")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("0");

                    b.HasKey("Id");

                    b.HasIndex("CongregacaoId")
                        .HasName("FK_ServicoCampo_Congregacao");

                    b.HasIndex("PioneiroId")
                        .HasName("FK_ServicoCampo_Pioneiro");

                    b.HasIndex("PublicadorId")
                        .HasName("FK_ServicoCampo_Publicador");

                    b.HasIndex("CongregacaoId", "PublicadorId")
                        .HasName("FK_ServicoCampo_Congregacao_Publicador");

                    b.ToTable("ServicoCampo","secretary");
                });

            modelBuilder.Entity("Secretary.API.Model.ServicoCampod", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("nextval('secretary.\"ServicoCampod_Id_seq\"'::regclass)");

                    b.Property<long>("CongregacaoId")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("1");

                    b.Property<double>("CreditoHoras");

                    b.Property<DateTime>("DateCreated")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("now()");

                    b.Property<double>("Estudos");

                    b.Property<double>("FolhetosBrochuras");

                    b.Property<double>("Horas");

                    b.Property<double>("HorasBetel");

                    b.Property<string>("Ipaddress")
                        .HasColumnName("IPAddress");

                    b.Property<double>("Livros");

                    b.Property<double>("Minutos");

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("now()");

                    b.Property<double>("Publicacoes");

                    b.Property<long>("PublicadorId")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("1");

                    b.Property<double>("Revisitas");

                    b.Property<double>("Revistas");

                    b.Property<double>("VideosMostrados")
                        .HasColumnName("videos_mostrados");

                    b.HasKey("Id");

                    b.HasIndex("PublicadorId")
                        .HasName("FK_ServicoCampod_Publicador");

                    b.HasIndex("CongregacaoId", "PublicadorId")
                        .HasName("FK_ServicoCampod_Congregacao_Publicador");

                    b.ToTable("ServicoCampod","secretary");
                });

            modelBuilder.Entity("Secretary.API.Model.ServicoCampos", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("nextval('secretary.\"ServicoCampos_Id_seq\"'::regclass)");

                    b.Property<long>("CongregacaoId")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("1");

                    b.Property<double>("CreditoHoras");

                    b.Property<DateTime>("DateCreated")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("now()");

                    b.Property<double>("Estudos");

                    b.Property<double>("FolhetosBrochuras");

                    b.Property<double>("Horas");

                    b.Property<double>("HorasBetel");

                    b.Property<string>("Ipaddress")
                        .HasColumnName("IPAddress");

                    b.Property<double>("Livros");

                    b.Property<double>("Minutos");

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("now()");

                    b.Property<double>("Publicacoes");

                    b.Property<long>("PublicadorId")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("1");

                    b.Property<double>("Revisitas");

                    b.Property<double>("Revistas");

                    b.Property<double>("VideosMostrados");

                    b.HasKey("Id");

                    b.HasIndex("PublicadorId")
                        .HasName("FK_ServicoCampos_Publicador");

                    b.HasIndex("CongregacaoId", "PublicadorId")
                        .HasName("FK_ServicoCampos_Congregacao_Publicador");

                    b.ToTable("ServicoCampos","secretary");
                });

            modelBuilder.Entity("Secretary.API.Model.ServicoCampot", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("nextval('secretary.\"ServicoCampot_Id_seq\"'::regclass)");

                    b.Property<long>("CongregacaoId")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("1");

                    b.Property<double>("CreditoHoras");

                    b.Property<DateTime>("DateCreated")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("now()");

                    b.Property<double>("Estudos");

                    b.Property<double>("FolhetosBrochuras");

                    b.Property<double>("Horas");

                    b.Property<double>("HorasBetel");

                    b.Property<string>("Ipaddress")
                        .HasColumnName("IPAddress");

                    b.Property<double>("Livros");

                    b.Property<double>("Minutos");

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("now()");

                    b.Property<double>("Publicacoes");

                    b.Property<long>("PublicadorId")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("1");

                    b.Property<double>("Revisitas");

                    b.Property<double>("Revistas");

                    b.Property<double>("VideosMostrados");

                    b.HasKey("Id");

                    b.HasIndex("PublicadorId")
                        .HasName("FK_ServicoCampot_Publicador");

                    b.HasIndex("CongregacaoId", "PublicadorId")
                        .HasName("FK_ServicoCampot_Congregacao_Publicador");

                    b.ToTable("ServicoCampot","secretary");
                });

            modelBuilder.Entity("Secretary.API.Model.Situacao", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("nextval('secretary.\"Situacao_Id_seq\"'::regclass)");

                    b.Property<long>("AuditoriaUsuario")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("1");

                    b.Property<long>("CongregacaoId")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("1");

                    b.Property<DateTime>("DateCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp(3) without time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<string>("Ipaddress")
                        .HasColumnName("IPAddress");

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("now()");

                    b.HasKey("Id");

                    b.HasIndex("CongregacaoId")
                        .HasName("FK_Situacao_Congregacao");

                    b.HasIndex("Descricao");

                    b.ToTable("Situacao","secretary");
                });

            modelBuilder.Entity("Secretary.API.Model.TipoLogradouro", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("nextval('secretary.\"TipoLogradouro_Id_seq\"'::regclass)");

                    b.Property<long>("AuditoriaUsuario")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("1");

                    b.Property<DateTime>("DateCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp(3) without time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<string>("Ipaddress")
                        .HasColumnName("IPAddress");

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("now()");

                    b.HasKey("Id");

                    b.HasIndex("Descricao")
                        .HasName("IX_Descricao");

                    b.ToTable("TipoLogradouro","secretary");
                });

            modelBuilder.Entity("Secretary.API.Model.Transferencia", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("nextval('secretary.\"Transferencia_Id_seq\"'::regclass)");

                    b.Property<long>("AuditoriaUsuario")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("1");

                    b.Property<long>("CongregacaoId")
                        .HasDefaultValueSql("1");

                    b.Property<DateTime>("Data")
                        .HasColumnType("timestamp(3) without time zone");

                    b.Property<DateTime>("DateCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp(3) without time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<long>("DestinoId")
                        .HasDefaultValueSql("1");

                    b.Property<string>("Ipaddress")
                        .HasColumnName("IPAddress");

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("now()");

                    b.Property<string>("Observacao")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<long>("OrigemId")
                        .HasDefaultValueSql("1");

                    b.Property<long>("PublicadorId")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("1");

                    b.HasKey("Id");

                    b.HasIndex("CongregacaoId");

                    b.HasIndex("DestinoId")
                        .HasName("FK_TipoLogradouro_Destino");

                    b.HasIndex("OrigemId")
                        .HasName("FK_TipoLogradouro_Origem");

                    b.HasIndex("PublicadorId")
                        .HasName("FK_TipoLogradouro_Publicador");

                    b.ToTable("Transferencia","secretary");
                });

            modelBuilder.Entity("Secretary.API.Model.Usuario", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("nextval('secretary.\"usuario_Id_seq\"'::regclass)");

                    b.Property<long?>("CongregacaoId");

                    b.Property<DateTime>("DateCreated")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("now()");

                    b.Property<string>("Email");

                    b.Property<string>("Ipaddress")
                        .HasColumnName("IPAddress");

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("now()");

                    b.Property<byte[]>("PasswordHarsh")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("'\\x'::bytea");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("'\\x'::bytea");

                    b.Property<long?>("PublicadorId")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("0");

                    b.Property<string>("Username")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("0")
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .HasName("IX_Usuario_Email");

                    b.HasIndex("PublicadorId")
                        .HasName("IX_Usuario_Publicador");

                    b.HasIndex("Username")
                        .IsUnique()
                        .HasName("IX_Usuario_Username");

                    b.HasIndex("CongregacaoId", "PublicadorId")
                        .HasName("IX_Usuario_Congregacao_Publicador");

                    b.ToTable("usuario","secretary");
                });

            modelBuilder.Entity("Secretary.API.Models.Cidade", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AdminCode1");

                    b.Property<string>("AdminCodes1_ISO3166_2");

                    b.Property<string>("AdminName1");

                    b.Property<string>("CountryCode");

                    b.Property<long?>("CountryId");

                    b.Property<string>("CountryName");

                    b.Property<long?>("EstadoId");

                    b.Property<string>("Fcl");

                    b.Property<string>("FclName");

                    b.Property<string>("Fcode");

                    b.Property<string>("FcodeName");

                    b.Property<int>("GeonameId");

                    b.Property<string>("Lng");

                    b.Property<string>("Name");

                    b.Property<int>("Population");

                    b.Property<string>("ToponymName");

                    b.HasKey("Id");

                    b.HasIndex("AdminCode1")
                        .HasName("FK_Cidade_adminCode1");

                    b.HasIndex("AdminName1")
                        .HasName("FK_Cidade_AdminName1");

                    b.HasIndex("CountryCode")
                        .HasName("FK_Cidade_CountryId");

                    b.HasIndex("CountryName")
                        .HasName("FK_Cidade_CountryName");

                    b.HasIndex("EstadoId");

                    b.HasIndex("GeonameId")
                        .HasName("FK_Cidade_GeonameId");

                    b.ToTable("Cidade","secretary");
                });

            modelBuilder.Entity("Secretary.API.Model.AssistenciaReuniao", b =>
                {
                    b.HasOne("Secretary.API.Model.Congregacao", "Congregacao")
                        .WithMany("AssistenciaReuniao")
                        .HasForeignKey("CongregacaoId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Secretary.API.Model.Reuniao", "Reuniao")
                        .WithMany("AssistenciaReuniao")
                        .HasForeignKey("ReuniaoId")
                        .HasConstraintName("AssistenciaReuniao$FK_AssistenciaReuniao_Reuniao")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Secretary.API.Model.Congregacao", b =>
                {
                    b.HasOne("Secretary.API.Model.Estado", "Estado")
                        .WithMany()
                        .HasForeignKey("EstadoId");

                    b.HasOne("Secretary.API.Model.TipoLogradouro", "TipoLogradouro")
                        .WithMany("Congregacao")
                        .HasForeignKey("TipoLogradouroId");
                });

            modelBuilder.Entity("Secretary.API.Model.Dianteira", b =>
                {
                    b.HasOne("Secretary.API.Model.Congregacao", "Congregacao")
                        .WithMany("Dianteira")
                        .HasForeignKey("CongregacaoId")
                        .HasConstraintName("Dianteira$FK_Dianteira_Congregacao")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Secretary.API.Model.Estado", b =>
                {
                    b.HasOne("Secretary.API.Model.Country", "Country")
                        .WithMany("Estado")
                        .HasForeignKey("CountryId")
                        .HasConstraintName("Dianteira$FK_Estado_Country")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Secretary.API.Model.Familia", b =>
                {
                    b.HasOne("Secretary.API.Model.Publicador", "ChefeFamilia")
                        .WithMany("FamiliaChefeFamilia")
                        .HasForeignKey("ChefeFamiliaId")
                        .HasConstraintName("familia$FK_Familia_ChefeFamilia");

                    b.HasOne("Secretary.API.Model.Congregacao", "Congregacao")
                        .WithMany("Familia")
                        .HasForeignKey("CongregacaoId")
                        .HasConstraintName("familia$FK_Familia_Congregacao")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Secretary.API.Model.Publicador", "Membro")
                        .WithMany("FamiliaMembro")
                        .HasForeignKey("MembroId")
                        .HasConstraintName("familia$FK_Familia_Membro");
                });

            modelBuilder.Entity("Secretary.API.Model.Familiares", b =>
                {
                    b.HasOne("Secretary.API.Model.Congregacao", "Congregacao")
                        .WithMany("Familiares")
                        .HasForeignKey("CongregacaoId")
                        .HasConstraintName("familia$FK_Familiares_Congregacao")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Secretary.API.Model.Publicador", "Membro")
                        .WithMany("FamiliaresMembro")
                        .HasForeignKey("MembroId")
                        .HasConstraintName("familiares$FK_Familiares_Membro");

                    b.HasOne("Secretary.API.Model.Publicador", "Publicador")
                        .WithMany("FamiliaresPublicador")
                        .HasForeignKey("PublicadorId")
                        .HasConstraintName("familiares$FK_Familiares_Publicador");
                });

            modelBuilder.Entity("Secretary.API.Model.Grupo", b =>
                {
                    b.HasOne("Secretary.API.Model.Publicador", "Ajudante")
                        .WithMany("GrupoAjudante")
                        .HasForeignKey("AjudanteId")
                        .HasConstraintName("grupo$FK_Grupo_Ajudante");

                    b.HasOne("Secretary.API.Model.Congregacao", "Congregacao")
                        .WithMany("Grupo")
                        .HasForeignKey("CongregacaoId")
                        .HasConstraintName("grupo$FK_Grupo_Congregacao")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Secretary.API.Model.Publicador", "Superintendente")
                        .WithMany("GrupoSuperintendente")
                        .HasForeignKey("SuperintendenteId")
                        .HasConstraintName("grupo$FK_Grupo_Superintendente");
                });

            modelBuilder.Entity("Secretary.API.Model.PeticaoPioneiroAuxiliar", b =>
                {
                    b.HasOne("Secretary.API.Model.Congregacao", "Congregacao")
                        .WithMany("PeticaoPioneiroAuxiliar")
                        .HasForeignKey("CongregacaoId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Secretary.API.Model.Pioneiro", "Pioneiro")
                        .WithMany("PeticaoPioneiroAuxiliar")
                        .HasForeignKey("PioneiroId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Secretary.API.Model.Publicador", "Publicador")
                        .WithMany("PeticaoPioneiroAuxiliar")
                        .HasForeignKey("PublicadorId")
                        .HasConstraintName("peticao$FK_PeticaoPioneiroAuxiliar_Publicador")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Secretary.API.Model.Pioneiro", b =>
                {
                    b.HasOne("Secretary.API.Model.Congregacao", "Congregacao")
                        .WithMany("Pioneiro")
                        .HasForeignKey("CongregacaoId")
                        .HasConstraintName("grupo$FK_Pioneiro_Congregacao")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Secretary.API.Model.PrivilegioCongregacional", b =>
                {
                    b.HasOne("Secretary.API.Model.Congregacao", "Congregacao")
                        .WithMany("PrivilegioCongregacional")
                        .HasForeignKey("CongregacaoId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Secretary.API.Model.Publicador", b =>
                {
                    b.HasOne("Secretary.API.Model.Congregacao", "Congregacao")
                        .WithMany("Publicador")
                        .HasForeignKey("CongregacaoId")
                        .HasConstraintName("publicador$FK_Publicador_Congregacao")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Secretary.API.Model.Country", "Country")
                        .WithMany("Publicador")
                        .HasForeignKey("CountryId")
                        .HasConstraintName("publicador$FK_Publicador_Country")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Secretary.API.Model.Dianteira", "Dianteira")
                        .WithMany("Publicador")
                        .HasForeignKey("DianteiraId")
                        .HasConstraintName("publicador$FK_Publicador_Dianteira");

                    b.HasOne("Secretary.API.Model.Estado", "Estado")
                        .WithMany("Publicador")
                        .HasForeignKey("EstadoId")
                        .HasConstraintName("publicador$FK_Publicador_Estado");

                    b.HasOne("Secretary.API.Model.Grupo", "Grupo")
                        .WithMany("Publicador")
                        .HasForeignKey("GrupoId")
                        .HasConstraintName("publicador$FK_Publicador_Grupo");

                    b.HasOne("Secretary.API.Model.Pioneiro", "Pioneiro")
                        .WithMany("Publicador")
                        .HasForeignKey("PioneiroId")
                        .HasConstraintName("publicador$FK_Publicador_Pioneiro");

                    b.HasOne("Secretary.API.Model.Situacao", "Situacao")
                        .WithMany("Publicador")
                        .HasForeignKey("SituacaoId")
                        .HasConstraintName("publicador$FK_Publicador_Situacao");

                    b.HasOne("Secretary.API.Model.TipoLogradouro", "TipoLogradouro")
                        .WithMany("Publicador")
                        .HasForeignKey("TipoLogradouroId")
                        .HasConstraintName("publicador$FK_Publicador_TipoLogradouro");
                });

            modelBuilder.Entity("Secretary.API.Model.PublicadorHistorico", b =>
                {
                    b.HasOne("Secretary.API.Model.Congregacao", "Congregacao")
                        .WithMany("PublicadorHistorico")
                        .HasForeignKey("CongregacaoId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Secretary.API.Model.Publicador", "Publicador")
                        .WithMany("PublicadorHistorico")
                        .HasForeignKey("PublicadorId")
                        .HasConstraintName("publicador_historico$FK_PublicadorHistorico_Publicador")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Secretary.API.Model.PublicadorPrivilegios", b =>
                {
                    b.HasOne("Secretary.API.Model.Congregacao", "Congregacao")
                        .WithMany("PublicadorPrivilegios")
                        .HasForeignKey("CongregacaoId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Secretary.API.Model.PrivilegioCongregacional", "PrivilegioCongregacional")
                        .WithMany("PublicadorPrivilegios")
                        .HasForeignKey("PrivilegioCongregacionalId")
                        .HasConstraintName("publicador_privilegios$FK_PublicadorPrivilegios_PrivilegioCongr");

                    b.HasOne("Secretary.API.Model.Publicador", "Publicador")
                        .WithMany("PublicadorPrivilegios")
                        .HasForeignKey("PublicadorId")
                        .HasConstraintName("publicador_privilegios$FK_PublicadorPrivilegios_Publicador");
                });

            modelBuilder.Entity("Secretary.API.Model.PublicadorUsuario", b =>
                {
                    b.HasOne("Secretary.API.Model.Congregacao", "Congregacao")
                        .WithMany("PublicadorUsuario")
                        .HasForeignKey("CongregacaoId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Secretary.API.Model.Recibo", b =>
                {
                    b.HasOne("Secretary.API.Model.Congregacao", "Congregacao")
                        .WithMany("Recibo")
                        .HasForeignKey("CongregacaoId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Secretary.API.Model.Reuniao", "Reuniao")
                        .WithMany("Recibo")
                        .HasForeignKey("ReuniaoId")
                        .HasConstraintName("recibo$FK_Recibo_Reuniao")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Secretary.API.Model.Reuniao", b =>
                {
                    b.HasOne("Secretary.API.Model.Congregacao", "Congregacao")
                        .WithMany("Reuniao")
                        .HasForeignKey("CongregacaoId")
                        .HasConstraintName("reuniao$FK_Reuniao_Congregacao")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Secretary.API.Model.ServicoCampo", b =>
                {
                    b.HasOne("Secretary.API.Model.Congregacao", "Congregacao")
                        .WithMany("ServicoCampo")
                        .HasForeignKey("CongregacaoId")
                        .HasConstraintName("servico_campo$FK_ServicoCampo_Congregacao")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Secretary.API.Model.Pioneiro", "Pioneiro")
                        .WithMany("ServicoCampo")
                        .HasForeignKey("PioneiroId")
                        .HasConstraintName("servico_campo$FK_ServicoCampo_Pioneiro");

                    b.HasOne("Secretary.API.Model.Publicador", "Publicador")
                        .WithMany("ServicoCampo")
                        .HasForeignKey("PublicadorId")
                        .HasConstraintName("servico_campo$FK_ServicoCampo_Publicador")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Secretary.API.Model.ServicoCampod", b =>
                {
                    b.HasOne("Secretary.API.Model.Congregacao", "Congregacao")
                        .WithMany("ServicoCampod")
                        .HasForeignKey("CongregacaoId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Secretary.API.Model.Publicador", "Publicador")
                        .WithMany("ServicoCampod")
                        .HasForeignKey("PublicadorId")
                        .HasConstraintName("servico_campod$FK_ServicoCampod_Publicador")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Secretary.API.Model.ServicoCampos", b =>
                {
                    b.HasOne("Secretary.API.Model.Congregacao", "Congregacao")
                        .WithMany("ServicoCampos")
                        .HasForeignKey("CongregacaoId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Secretary.API.Model.Publicador", "Publicador")
                        .WithMany("ServicoCampos")
                        .HasForeignKey("PublicadorId")
                        .HasConstraintName("servico_campos$FK_ServicoCampos_Publicador")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Secretary.API.Model.ServicoCampot", b =>
                {
                    b.HasOne("Secretary.API.Model.Congregacao", "Congregacao")
                        .WithMany("ServicoCampot")
                        .HasForeignKey("CongregacaoId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Secretary.API.Model.Publicador", "Publicador")
                        .WithMany("ServicoCampot")
                        .HasForeignKey("PublicadorId")
                        .HasConstraintName("servico_campot$FK_ServicoCampot_Publicador")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Secretary.API.Model.Situacao", b =>
                {
                    b.HasOne("Secretary.API.Model.Congregacao", "Congregacao")
                        .WithMany("Situacao")
                        .HasForeignKey("CongregacaoId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Secretary.API.Model.Transferencia", b =>
                {
                    b.HasOne("Secretary.API.Model.Congregacao", "Congregacao")
                        .WithMany("TransferenciaCongregacao")
                        .HasForeignKey("CongregacaoId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Secretary.API.Model.Congregacao", "Destino")
                        .WithMany("TransferenciaDestino")
                        .HasForeignKey("DestinoId")
                        .HasConstraintName("transferencia$FK_TipoLogradouro_Destino");

                    b.HasOne("Secretary.API.Model.Congregacao", "Origem")
                        .WithMany("TransferenciaOrigem")
                        .HasForeignKey("OrigemId")
                        .HasConstraintName("transferencia$FK_TipoLogradouro_Origem");

                    b.HasOne("Secretary.API.Model.Publicador", "Publicador")
                        .WithMany("Transferencia")
                        .HasForeignKey("PublicadorId")
                        .HasConstraintName("transferencia$FK_TipoLogradouro_Publicador");
                });

            modelBuilder.Entity("Secretary.API.Model.Usuario", b =>
                {
                    b.HasOne("Secretary.API.Model.Congregacao", "Congregacao")
                        .WithMany()
                        .HasForeignKey("CongregacaoId");

                    b.HasOne("Secretary.API.Model.Publicador", "Publicador")
                        .WithMany()
                        .HasForeignKey("PublicadorId");
                });

            modelBuilder.Entity("Secretary.API.Models.Cidade", b =>
                {
                    b.HasOne("Secretary.API.Model.Estado", "Estado")
                        .WithMany("Cidade")
                        .HasForeignKey("EstadoId");
                });
#pragma warning restore 612, 618
        }
    }
}
